{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\script\\i18n/assets\\script\\i18n\\polyglot.js"],"names":["root","factory","define","amd","exports","module","Polyglot","global","replace","String","prototype","options","phrases","extend","currentLocale","locale","allowMissing","warn","VERSION","newLocale","morePhrases","prefix","phrase","key","hasOwnProperty","unset","clear","newPhrases","t","result","smart_count","_","clone","choosePluralForm","interpolate","has","delimeter","pluralTypes","chinese","n","german","french","russian","czech","polish","icelandic","pluralTypeToLanguages","langToTypeMap","mapping","type","langs","l","ret","trimRe","trim","str","call","text","count","texts","chosenText","split","pluralTypeIndex","pluralTypeName","langToPluralType","en","dollarRegex","dollarBillsYall","arg","replacement","RegExp","message","console","source","prop"],"mappings":"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","file":"polyglot.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\i18n","sourcesContent":["//     (c) 2012-2016 Airbnb, Inc.\r\n//\r\n//     polyglot.js may be freely distributed under the terms of the BSD\r\n//     license. For all licensing information, details, and documention:\r\n//     http://airbnb.github.com/polyglot.js\r\n//\r\n//\r\n// Polyglot.js is an I18n helper library written in JavaScript, made to\r\n// work both in the browser and in Node. It provides a simple solution for\r\n// interpolation and pluralization, based off of Airbnb's\r\n// experience adding I18n functionality to its Backbone.js and Node apps.\r\n//\r\n// Polylglot is agnostic to your translation backend. It doesn't perform any\r\n// translation; it simply gives you a way to manage translated phrases from\r\n// your client- or server-side JavaScript application.\r\n//\r\n\r\n\r\n(function(root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], function() {\r\n      return factory(root);\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(root);\r\n  } else {\r\n    root.Polyglot = factory(root);\r\n  }\r\n}(typeof global !== 'undefined' ? global : this, function(root) {\r\n  'use strict';\r\n\r\n  var replace = String.prototype.replace;\r\n\r\n  // ### Polyglot class constructor\r\n  function Polyglot(options) {\r\n    options = options || {};\r\n    this.phrases = {};\r\n    this.extend(options.phrases || {});\r\n    this.currentLocale = options.locale || 'en';\r\n    this.allowMissing = !!options.allowMissing;\r\n    this.warn = options.warn || warn;\r\n  }\r\n\r\n  // ### Version\r\n  Polyglot.VERSION = '1.0.0';\r\n\r\n  // ### polyglot.locale([locale])\r\n  //\r\n  // Get or set locale. Internally, Polyglot only uses locale for pluralization.\r\n  Polyglot.prototype.locale = function(newLocale) {\r\n    if (newLocale) this.currentLocale = newLocale;\r\n    return this.currentLocale;\r\n  };\r\n\r\n  // ### polyglot.extend(phrases)\r\n  //\r\n  // Use `extend` to tell Polyglot how to translate a given key.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     });\r\n  //\r\n  // The key can be any string.  Feel free to call `extend` multiple times;\r\n  // it will override any phrases with the same key, but leave existing phrases\r\n  // untouched.\r\n  //\r\n  // It is also possible to pass nested phrase objects, which get flattened\r\n  // into an object with the nested keys concatenated using dot notation.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"nav\": {\r\n  //         \"hello\": \"Hello\",\r\n  //         \"hello_name\": \"Hello, %{name}\",\r\n  //         \"sidebar\": {\r\n  //           \"welcome\": \"Welcome\"\r\n  //         }\r\n  //       }\r\n  //     });\r\n  //\r\n  //     console.log(polyglot.phrases);\r\n  //     // {\r\n  //     //   'nav.hello': 'Hello',\r\n  //     //   'nav.hello_name': 'Hello, %{name}',\r\n  //     //   'nav.sidebar.welcome': 'Welcome'\r\n  //     // }\r\n  //\r\n  // `extend` accepts an optional second argument, `prefix`, which can be used\r\n  // to prefix every key in the phrases object with some string, using dot\r\n  // notation.\r\n  //\r\n  //     polyglot.extend({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     }, \"nav\");\r\n  //\r\n  //     console.log(polyglot.phrases);\r\n  //     // {\r\n  //     //   'nav.hello': 'Hello',\r\n  //     //   'nav.hello_name': 'Hello, %{name}'\r\n  //     // }\r\n  //\r\n  // This feature is used internally to support nested phrase objects.\r\n  Polyglot.prototype.extend = function(morePhrases, prefix) {\r\n    var phrase;\r\n\r\n    for (var key in morePhrases) {\r\n      if (morePhrases.hasOwnProperty(key)) {\r\n        phrase = morePhrases[key];\r\n        if (prefix) key = prefix + '.' + key;\r\n        if (typeof phrase === 'object') {\r\n          this.extend(phrase, key);\r\n        } else {\r\n          this.phrases[key] = phrase;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // ### polyglot.unset(phrases)\r\n  // Use `unset` to selectively remove keys from a polyglot instance.\r\n  //\r\n  //     polyglot.unset(\"some_key\");\r\n  //     polyglot.unset({\r\n  //       \"hello\": \"Hello\",\r\n  //       \"hello_name\": \"Hello, %{name}\"\r\n  //     });\r\n  //\r\n  // The unset method can take either a string (for the key), or an object hash with\r\n  // the keys that you would like to unset.\r\n  Polyglot.prototype.unset = function(morePhrases, prefix) {\r\n    var phrase;\r\n\r\n    if (typeof morePhrases === 'string') {\r\n      delete this.phrases[morePhrases];\r\n    } else {\r\n      for (var key in morePhrases) {\r\n        if (morePhrases.hasOwnProperty(key)) {\r\n          phrase = morePhrases[key];\r\n          if (prefix) key = prefix + '.' + key;\r\n          if (typeof phrase === 'object') {\r\n            this.unset(phrase, key);\r\n          } else {\r\n            delete this.phrases[key];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // ### polyglot.clear()\r\n  //\r\n  // Clears all phrases. Useful for special cases, such as freeing\r\n  // up memory if you have lots of phrases but no longer need to\r\n  // perform any translation. Also used internally by `replace`.\r\n  Polyglot.prototype.clear = function() {\r\n    this.phrases = {};\r\n  };\r\n\r\n  // ### polyglot.replace(phrases)\r\n  //\r\n  // Completely replace the existing phrases with a new set of phrases.\r\n  // Normally, just use `extend` to add more phrases, but under certain\r\n  // circumstances, you may want to make sure no old phrases are lying around.\r\n  Polyglot.prototype.replace = function(newPhrases) {\r\n    this.clear();\r\n    this.extend(newPhrases);\r\n  };\r\n\r\n\r\n  // ### polyglot.t(key, options)\r\n  //\r\n  // The most-used method. Provide a key, and `t` will return the\r\n  // phrase.\r\n  //\r\n  //     polyglot.t(\"hello\");\r\n  //     => \"Hello\"\r\n  //\r\n  // The phrase value is provided first by a call to `polyglot.extend()` or\r\n  // `polyglot.replace()`.\r\n  //\r\n  // Pass in an object as the second argument to perform interpolation.\r\n  //\r\n  //     polyglot.t(\"hello_name\", {name: \"Spike\"});\r\n  //     => \"Hello, Spike\"\r\n  //\r\n  // If you like, you can provide a default value in case the phrase is missing.\r\n  // Use the special option key \"_\" to specify a default.\r\n  //\r\n  //     polyglot.t(\"i_like_to_write_in_language\", {\r\n  //       _: \"I like to write in %{language}.\",\r\n  //       language: \"JavaScript\"\r\n  //     });\r\n  //     => \"I like to write in JavaScript.\"\r\n  //\r\n  Polyglot.prototype.t = function(key, options) {\r\n    var phrase, result;\r\n    options = options == null ? {} : options;\r\n    // allow number as a pluralization shortcut\r\n    if (typeof options === 'number') {\r\n      options = {smart_count: options};\r\n    }\r\n    if (typeof this.phrases[key] === 'string') {\r\n      phrase = this.phrases[key];\r\n    } else if (typeof options._ === 'string') {\r\n      phrase = options._;\r\n    } else if (this.allowMissing) {\r\n      phrase = key;\r\n    } else {\r\n      this.warn('Missing translation for key: \"'+key+'\"');\r\n      result = key;\r\n    }\r\n    if (typeof phrase === 'string') {\r\n      options = clone(options);\r\n      result = choosePluralForm(phrase, this.currentLocale, options.smart_count);\r\n      result = interpolate(result, options);\r\n    }\r\n    return result;\r\n  };\r\n\r\n\r\n  // ### polyglot.has(key)\r\n  //\r\n  // Check if polyglot has a translation for given key\r\n  Polyglot.prototype.has = function(key) {\r\n    return key in this.phrases;\r\n  };\r\n\r\n\r\n  // #### Pluralization methods\r\n  // The string that separates the different phrase possibilities.\r\n  var delimeter = '||||';\r\n\r\n  // Mapping from pluralization group plural logic.\r\n  var pluralTypes = {\r\n    chinese:   function(n) { return 0; },\r\n    german:    function(n) { return n !== 1 ? 1 : 0; },\r\n    french:    function(n) { return n > 1 ? 1 : 0; },\r\n    russian:   function(n) { return n % 10 === 1 && n % 100 !== 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2; },\r\n    czech:     function(n) { return (n === 1) ? 0 : (n >= 2 && n <= 4) ? 1 : 2; },\r\n    polish:    function(n) { return (n === 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2); },\r\n    icelandic: function(n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; }\r\n  };\r\n\r\n  // Mapping from pluralization group to individual locales.\r\n  var pluralTypeToLanguages = {\r\n    chinese:   ['fa', 'id', 'ja', 'ko', 'lo', 'ms', 'th', 'tr', 'zh'],\r\n    german:    ['da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hu', 'it', 'nl', 'no', 'pt', 'sv'],\r\n    french:    ['fr', 'tl', 'pt-br'],\r\n    russian:   ['hr', 'ru'],\r\n    czech:     ['cs', 'sk'],\r\n    polish:    ['pl'],\r\n    icelandic: ['is']\r\n  };\r\n\r\n  function langToTypeMap(mapping) {\r\n    var type, langs, l, ret = {};\r\n    for (type in mapping) {\r\n      if (mapping.hasOwnProperty(type)) {\r\n        langs = mapping[type];\r\n        for (l in langs) {\r\n          ret[langs[l]] = type;\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  // Trim a string.\r\n  var trimRe = /^\\s+|\\s+$/g;\r\n  function trim(str){\r\n    return replace.call(str, trimRe, '');\r\n  }\r\n\r\n  // Based on a phrase text that contains `n` plural forms separated\r\n  // by `delimeter`, a `locale`, and a `count`, choose the correct\r\n  // plural form, or none if `count` is `null`.\r\n  function choosePluralForm(text, locale, count){\r\n    var ret, texts, chosenText;\r\n    if (count != null && text) {\r\n      texts = text.split(delimeter);\r\n      chosenText = texts[pluralTypeIndex(locale, count)] || texts[0];\r\n      ret = trim(chosenText);\r\n    } else {\r\n      ret = text;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  function pluralTypeName(locale) {\r\n    var langToPluralType = langToTypeMap(pluralTypeToLanguages);\r\n    return langToPluralType[locale] || langToPluralType.en;\r\n  }\r\n\r\n  function pluralTypeIndex(locale, count) {\r\n    return pluralTypes[pluralTypeName(locale)](count);\r\n  }\r\n\r\n  // ### interpolate\r\n  //\r\n  // Does the dirty work. Creates a `RegExp` object for each\r\n  // interpolation placeholder.\r\n  var dollarRegex = /\\$/g;\r\n  var dollarBillsYall = '$$$$';\r\n  function interpolate(phrase, options) {\r\n    for (var arg in options) {\r\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\r\n        // Ensure replacement value is escaped to prevent special $-prefixed\r\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\r\n        // be escaped with \"$\" itself, and we need two in the resulting output.\r\n        var replacement = options[arg];\r\n        if (typeof replacement === 'string') {\r\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);\r\n        }\r\n        // We create a new `RegExp` each time instead of using a more-efficient\r\n        // string replace so that the same argument can be replaced multiple times\r\n        // in the same phrase.\r\n        phrase = replace.call(phrase, new RegExp('%\\\\{'+arg+'\\\\}', 'g'), replacement);\r\n      }\r\n    }\r\n    return phrase;\r\n  }\r\n\r\n  // ### warn\r\n  //\r\n  // Provides a warning in the console if a phrase key is missing.\r\n  function warn(message) {\r\n    root.console && root.console.warn && root.console.warn('WARNING: ' + message);\r\n  }\r\n\r\n  // ### clone\r\n  //\r\n  // Clone an object.\r\n  function clone(source) {\r\n    var ret = {};\r\n    for (var prop in source) {\r\n      ret[prop] = source[prop];\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  return Polyglot;\r\n}));\r\n"]}