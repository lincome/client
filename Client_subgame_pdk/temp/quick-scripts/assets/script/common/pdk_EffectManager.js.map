{"version":3,"sources":["pdk_EffectManager.js"],"names":["app","require","pdk_EffectManager","BaseClass","extend","Init","JS_Name","subGameName","SysDataManager","Effect","GetTableDict","cacheEffectDict","loadPrefabDict","CreateEffectByEffectRes","effectName","effectRes","userData","that","hasOwnProperty","ErrLog","bluebird","reject","Error","resInfo","prefabPath","componentName","zorderLv","CreateEffect","catch","error","stack","effectNode","get","effectComponent","getComponent","active","InitEffectData","resolve","LoadPrefab","then","effePrefabObj","console","log","cc","instantiate","OnCreate","CreateLoadPromise","prefab","DeleteEffect","GetModelProperty","CacheModelNode","DeleteEffectByDict","effectComponentDict","effectNameList","Object","keys","count","length","index","component","NodePool","modelPool","put","node","g_pdk_EffectManager","exports","GetModel"],"mappings":"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","file":"pdk_EffectManager.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\script\\common","sourcesContent":["/*\r\n    特效管理器\r\n*/\r\nvar app = require(\"pdk_app\");\r\n\r\nvar pdk_EffectManager = app.BaseClass.extend({\r\n\r\n    Init:function(){\r\n        this.JS_Name = app.subGameName + \"_EffectManager\";\r\n        this.SysDataManager = app[app.subGameName + \"_SysDataManager\"]();\r\n        this.Effect = this.SysDataManager.GetTableDict(\"Effect\");\r\n\r\n        //特效回收池\r\n        this.cacheEffectDict = {};\r\n\r\n        //预制缓存字典\r\n        this.loadPrefabDict = {};\r\n    },\r\n\r\n    //-----------创建接口--------------------\r\n    //根据模型资源创建模型\r\n    CreateEffectByEffectRes:function(effectName, effectRes, userData=0){\r\n\r\n        let that = this;\r\n\t\t// console.log(\"EFFENT DATA TABLE:\",this.Effect);\r\n        if(!this.Effect.hasOwnProperty(effectRes)){\r\n            this.ErrLog(\"CreateEffectByEffectRes Effect.txt not find(%s)\", effectRes);\r\n            return app.bluebird.reject(new Error(\"CreateEffectByEffectRes effectRes not find\"));\r\n        }\r\n        let resInfo = this.Effect[effectRes];\r\n        let prefabPath = resInfo[\"FilePath\"];\r\n        let componentName = resInfo[\"ComponentName\"];\r\n        let zorderLv = resInfo[\"ZorderLv\"];\r\n\r\n        return this.CreateEffect(effectName, effectRes, userData, prefabPath, componentName, zorderLv)\r\n                    .catch(function(error){\r\n                        that.ErrLog(\"CreateEffectByEffectRes(%s,%s,%s) error:%s\", effectName, effectRes, userData, error.stack);\r\n                    })\r\n\r\n    },\r\n\r\n\r\n    //创建模型\r\n    CreateEffect:function(effectName, effectRes, userData, prefabPath, componentName, zorderLv){\r\n        let that = this;\r\n        let effectNode = null;\r\n\r\n        if(this.cacheEffectDict.hasOwnProperty(effectRes)){\r\n            effectNode = this.cacheEffectDict[effectRes].get();\r\n        }\r\n\r\n        //如缓存池中有对象\r\n        if(effectNode){\r\n            //直接获取脚本组件对象\r\n            let effectComponent = effectNode.getComponent(componentName);\r\n\t        effectNode.active = false;\r\n            //不需要调用OnCreate接口创建\r\n            effectComponent.InitEffectData(effectName, effectRes, userData, componentName, zorderLv)\r\n            return app.bluebird.resolve(effectComponent)\r\n        }\r\n        else{\r\n            return this.LoadPrefab(prefabPath)\r\n                        .then(function(effePrefabObj){\r\n\r\n                            //that.Log(\"CreateEffect(%s,%s,%s)\", effectName, effectRes, prefabPath);\r\n                            console.log(\"CreateEffect effectName:\"+effectName);\r\n                            console.log(\"CreateEffect effectRes:\"+effectRes);\r\n                            console.log(\"CreateEffect prefabPath:\"+prefabPath);\r\n                            console.log(\"CreateEffect componentName:\"+componentName);\r\n                            let effectNode = cc.instantiate(effePrefabObj);\r\n                            //设置模型不可以见,需要模型自动ShowModel\r\n                            effectNode.active = false;\r\n                            //预制名和组件名相同,获取脚本组件名\r\n                            let effectComponent = effectNode.getComponent(componentName);\r\n                            if(!effectComponent){\r\n                                that.ErrLog(\"CreateEffect(%s,%s) not find Component (%s)\", effectName, effectRes, componentName);\r\n                                return null\r\n                            }\r\n                           \r\n                            effectComponent.OnCreate(effectName, effectRes, userData, componentName, zorderLv);\r\n\r\n                            return effectComponent\r\n                        })\r\n\r\n        }\r\n    },\r\n\r\n    //载入模型预制\r\n    LoadPrefab:function(prefabPath){\r\n\r\n        let loadPrefabDict = this.loadPrefabDict;\r\n\r\n        //缓存处理,预制可能已经加载过了\r\n        if(loadPrefabDict.hasOwnProperty(prefabPath)){\r\n            return app.bluebird.resolve(loadPrefabDict[prefabPath]);\r\n        }\r\n        let that = this;\r\n\r\n        return app[app.subGameName + \"_ControlManager\"]().CreateLoadPromise(prefabPath)\r\n                            .then(function(prefab){\r\n                                loadPrefabDict[prefabPath] = prefab;\r\n                                return prefab\r\n                            })\r\n\r\n    },\r\n\r\n    //----------------操作接口--------------------\r\n    //删除特效\r\n    DeleteEffect:function(effectComponent){\r\n        let effectRes = effectComponent.GetModelProperty(\"EffectRes\");\r\n\r\n        this.CacheModelNode(effectRes, effectComponent)\r\n\r\n        // if(this.NeedCacheEffectResDict.hasOwnProperty(effectRes)){\r\n\r\n        // }\r\n        // else{\r\n        //     effectComponent.Destroy();\r\n        // }\r\n    },\r\n\r\n\t//删除特效通过字典\r\n\tDeleteEffectByDict:function(effectComponentDict){\r\n\t\tlet effectNameList = Object.keys(effectComponentDict);\r\n\t\tlet count = effectNameList.length;\r\n\t\tfor(let index=0; index<count; index++){\r\n\t\t\tlet effectComponent = effectComponentDict[effectNameList[index]];\r\n\t\t\tlet effectRes = effectComponent.GetModelProperty(\"EffectRes\");\r\n\t\t\tthis.CacheModelNode(effectRes, effectComponent)\r\n\t\t}\r\n\t},\r\n\r\n    //回收节点\r\n    CacheModelNode:function(effectRes, component){\r\n\r\n        //如果是模型对象缓存\r\n        let componentName = component.GetModelProperty(\"ComponentName\");\r\n        //如果是需要记录到缓冲池的\r\n        if(!this.cacheEffectDict.hasOwnProperty(effectRes)){\r\n            this.cacheEffectDict[effectRes] = new cc.NodePool(componentName);\r\n        }\r\n        let modelPool = this.cacheEffectDict[effectRes];\r\n        modelPool.put(component.node);\r\n\r\n    },\r\n\r\n});\r\n\r\n\r\nvar g_pdk_EffectManager = null;\r\n\r\n/**\r\n * 绑定模块外部方法\r\n */\r\nexports.GetModel = function(){\r\n    if(!g_pdk_EffectManager){\r\n        g_pdk_EffectManager = new pdk_EffectManager();\r\n    }\r\n    return g_pdk_EffectManager;\r\n}"]}